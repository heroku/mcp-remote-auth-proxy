# For local development copy this template file to your .env file:
#   $ cp .env.template .env
# and edit appropriately.

# This is the port where the MCP Remote Auth Proxy will be listening for requests in localhost.
PORT="3001"

# Set these to the API Client ID and Secret that redirects logged-in users to your localhost
# (redirect URI: http://localhost:$PORT/interaction/identity/callback).
IDENTITY_CLIENT_ID=""
IDENTITY_CLIENT_SECRET=""

# For local development we strongly suggest using staging services. You can configure this with
# production services, but then the provided IDENTITY_CLIENT_ID and IDENTITY_CLIENT_SECRET
# need to be the credentials for an API client registered in the production environment too.
# Example for Heroku production services:
#   HEROKU_API_URL="https://api.heroku.com"
#   IDENTITY_SERVER_METADATA_FILE="$(pwd)/heroku_identity_production_metadata.json"
#   IDENTITY_SERVER_URL="https://id.heroku.com"
HEROKU_API_URL="https://api.staging.herokudev.com"
IDENTITY_SERVER_METADATA_FILE="$(pwd)/heroku_identity_staging_metadata.json"
IDENTITY_SERVER_URL="https://identity.staging.herokudev.com"

# Set to the scope the MCP Server tools will require over the backend services protected by the
# upstream IdP tokens.
IDENTITY_SCOPE="global"

# Configuration for Redis service, using by default your Redis/Valkey server running on localhost.
MCP_AUTH_PROXY_REDIS_URL="redis://localhost:6379"

# This is the port where the Auth Proxy will send requests to the MCP endpoint.
MCP_SERVER_PORT="3000"

# Set this to the absolute path for the directory containing your local copy of the Remote MCP Server
# (i.e. your clone for https://github.com/heroku/mcp-heroku-com).
# Ensure the project is correctly initialized with 'npm install && npm run build' before starting
# the MCP Remote Auth Proxy server.
MCP_SERVER_RUN_DIR=""

# Set this to the output of running the following command:
#   echo "[$(jwkgen --jwk | jq -c -M)]"
OIDC_PROVIDER_JWKS=""

# Change to "false" to have OTel Traces sent to Honeycomb for local development.
OTEL_SDK_DISABLED="true"

# Set this to something like "mcp-<your-heroku-username>-localhost". Traces will appear under this
# Dataset name in Honeycomb if you choose to sent traces from localhost.
OTEL_SERVICE_NAME=""

# Set the Honeycomb Development environment API Key here if you plan to send traces from localhost
# (it can be found here: https://ui.honeycomb.io/heroku/environments/development/send-data).
HONEYCOMB_DEVELOPMENT_API_KEY=

# Things below this line shouldn't require changes.
BASE_URL="http://localhost:$PORT"
LOCAL_INSECURE="true"
MCP_SERVER_RUN_ARGS_JSON="["start"]"
MCP_SERVER_RUN_COMMAND="npm"
MCP_SERVER_RUN_ENV_JSON="{"PORT":$MCP_SERVER_PORT,"HEROKU_API_URL":$HEROKU_API_URL}"
MCP_SERVER_URL="http://localhost:$MCP_SERVER_PORT/mcp"
NODE_ENV="development"
OTEL_EXPORTER_OTLP_ENDPOINT="https://api.honeycomb.io"
OTEL_EXPORTER_OTLP_HEADERS="x-honeycomb-team=$HONEYCOMB_DEVELOPMENT_API_KEY"
OTEL_EXPORTER_OTLP_PROTOCOL="http/protobuf"
